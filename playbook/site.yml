---
- name: Install nginx
  hosts: lighthouse
  roles:
    - App
  # handlers:
  #   - name: Start Nginx
  #     become: true
  #     ansible.builtin.command: "nginx"
  #     changed_when: false

  #   - name: Reload Nginx
  #     become: true
  #     ansible.builtin.command: "nginx -s reload"
  #     changed_when: false

  # pre_tasks:
  #   - name: Lighthouse | install dependencies
  #     become: true
  #     ansible.builtin.yum:
  #       name: git
  #       state: present

  #   - name: Install node.js (if not already installed)
  #     become: true
  #     ansible.builtin.yum:
  #       name: nodejs
  #       state: present

  #   - name: Install npm globally (if needed)
  #     become: true
  #     ansible.builtin.yum:
  #       name: npm
  #       state: present

  # tasks:
  #   - name: Nginx | install epel-release
  #     become: true
  #     ansible.builtin.yum:
  #       name:
  #         - epel-release
  #       state: present
  #   - name: Nginx | install nginx
  #     become: true
  #     ansible.builtin.yum:
  #       name: nginx
  #       state: present
  #     notify: start-nginx
  #   - name: Nginx | create general config
  #     become: true
  #     ansible.builtin.template:
  #       src: templates/nginx.conf.j2
  #       dest: /etc/nginx/nginx.conf
  #       mode: '0644'
  #     notify: reload-nginx

- name: Install lighthouse
  hosts: lighthouse
  roles:
    - Lighthouse
  # handlers:
  #   - name: Reload Nginx
  #     become: true
  #     ansible.builtin.command: "nginx -s reload"
  #     changed_when: false
  # pre_tasks:
  #   - name: Lighthouse | install dependencies
  #     become: true
  #     ansible.builtin.yum:
  #       name: git
  #       state: present

  # tasks:
  #   - name: Install Lighthouse globally
  #     become: true
  #     ansible.builtin.command: "npm install -g lighthouse"
  #     changed_when: false
  #     register: lighthouse_install
  #     failed_when: lighthouse_install.rc != 0

  #   - name: Check Lighthouse installation version
  #     become: true
  #     ansible.builtin.command: "/usr/local/bin/lighthouse --version"
  #     changed_when: false
  #     register: lighthouse_version
  #     failed_when: lighthouse_version.rc != 0

  #   - name: Print Lighthouse version
  #     ansible.builtin.debug:
  #       msg: "Lighthouse version: {{ lighthouse_version.stdout }}"

  #   - name: Lighthouse | create lighthouse config
  #     become: true
  #     ansible.builtin.template:
  #       src: templates/lighthouseconf.j2
  #       dest: /etc/nginx/conf.d/default.conf
  #       mode: '0644'

- name: Install and configure vector
  hosts: vector
  become: true
  roles:
    - Vector
  # handlers:
  #   - name: Restart vector service
  #     ansible.builtin.systemd:
  #       name: vector
  #       state: restarted

  #   # Restart the Vector service after installation and configuration
  #   - name: Restart vector service
  #     ansible.builtin.systemd:
  #       name: vector
  #       state: restarted
  #       enabled: true

  # tasks:
  #   # Determine the architecture for installing the package
  #   - name: Install vector prepare architecture name when x64
  #     ansible.builtin.set_fact:
  #       architecture_name: amd64
  #     when: ansible_architecture == 'x86_64'

  #   - name: Install vector prepare architecture name when else
  #     ansible.builtin.set_fact:
  #       architecture_name: undefined
  #     when: ansible_architecture != 'x86_64'

  #   # Installing Vector for x86_64 (RPM) architecture
  #   - name: Install vector yum install for x86_64
  #     ansible.builtin.yum:
  #       name: "https://packages.timber.io/vector/{{ vector_version }}/vector-x86_64.rpm"
  #       state: present
  #       disable_gpg_check: true
  #     when: architecture_name == 'amd64'
  #     notify: restart vector service

  #   # Configuring a systemd unit for Vector
  #   - name: Configure service template systemd unit
  #     ansible.builtin.template:
  #       src: vector.service.j2
  #       dest: /etc/systemd/system/vector.service
  #       mode: '0644'
  #     notify: restart vector service

  #   # Let's make sure the configuration directory exists.
  #   - name: Configure Vector ensure directory exists
  #     ansible.builtin.file:
  #       path: "{{ vector_config_dir }}"
  #       state: directory
  #       mode: '0755'
  #     notify: restart vector service

  #   # We configure the Vector configuration itself via a template
  #   - name: Configure vector template config
  #     ansible.builtin.template:
  #       src: vector_config.j2
  #       dest: "{{ vector_config_dir }}/vector.toml"
  #       mode: '0644'
  #     notify: restart vector service


- name: Install clickhouse
  hosts: clickhouse
  roles:
    - clickhouse
  # vars:
  #   vector_version: "0.36.1"  # example
  #   vector_config_dir: "/etc/vector"
  # handlers:
  #   - name: Start clickhouse service
  #     become: true
  #     ansible.builtin.service:
  #       name: clickhouse-server
  #       state: restarted
  # tasks:
  #   - name: Get clickhouse distrib (main download)
  #     block:
  #       - name: Get clickhouse distrib
  #         ansible.builtin.get_url:
  #           url: "https://packages.clickhouse.com/rpm/stable/{{ item }}-{{ clickhouse_version }}.noarch.rpm"
  #           dest: "./{{ item }}-{{ clickhouse_version }}.rpm"
  #           mode: '0644'
  #         with_items: "{{ clickhouse_packages }}"
  #     rescue:
  #       - name: Get clickhouse distrib
  #         ansible.builtin.get_url:
  #           url: "https://packages.clickhouse.com/rpm/stable/clickhouse-common-static-{{ clickhouse_version }}.x86_64.rpm"
  #           dest: "./clickhouse-common-static-{{ clickhouse_version }}.rpm"
  #           mode: '0644'
  #   - name: Install clickhouse packages
  #     become: true
  #     ansible.builtin.yum:
  #       name:
  #         - clickhouse-common-static-{{ clickhouse_version }}.rpm
  #         - clickhouse-client-{{ clickhouse_version }}.rpm
  #         - clickhouse-server-{{ clickhouse_version }}.rpm
  #       disable_gpg_check: true
  #     notify: Start clickhouse service
  #   - name: Flush handlers
  #     meta: flush_handlers
  #   - name: Create database
  #     ansible.builtin.command: "clickhouse-client --host {{ clickhouse_host_ip }} --port 9000 -q 'create database logs;'"
  #     register: create_db
  #     failed_when: create_db.rc != 0 and create_db.rc !=82
  #     changed_when: create_db.rc == 0

